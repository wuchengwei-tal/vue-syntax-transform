// Vitest Snapshot v1

exports[`SFC analyze <script> bindings > auto name inference > basic 1`] = `"const a = 1"`;

exports[`SFC analyze <script> bindings > auto name inference > do not overwrite manual name (call) 1`] = `
"import { defineComponent } from 'vue'
        export default defineComponent({
          name: 'Baz'
        })
        const a = 1"
`;

exports[`SFC analyze <script> bindings > auto name inference > do not overwrite manual name (object) 1`] = `
"export default {
          name: 'Baz'
        }
        const a = 1"
`;

exports[`SFC compile <script setup> > <script> after <script setup> the script content not end with \`\\n\` 1`] = `
"import { x } from './x'
    
    const n = 1"
`;

exports[`SFC compile <script setup> > <script> and <script setup> co-usage > script first 1`] = `
"import { x } from './x'
      
      export const n = 1

      export default {}
      
      x()"
`;

exports[`SFC compile <script setup> > <script> and <script setup> co-usage > script setup first 1`] = `
"import { x } from './x'
      
      x()
      
      export const n = 1
      export default {}"
`;

exports[`SFC compile <script setup> > <script> and <script setup> co-usage > script setup first, lang="ts", script block content export default 1`] = `
"import { x } from './x'
      
      x()
      
      export default {
        name: \\"test\\"
      }"
`;

exports[`SFC compile <script setup> > <script> and <script setup> co-usage > script setup first, named default export 1`] = `
"import { x } from './x'
      
      x()
      
      export const n = 1
      const def = {}
      export { def as default }"
`;

exports[`SFC compile <script setup> > <script> and <script setup> co-usage > spaces in ExportDefaultDeclaration node > with many spaces and newline 1`] = `
"import { x } from './x'
        
        export const n = 1
        export        default
        {
          some:'option'
        }
        
        x()"
`;

exports[`SFC compile <script setup> > <script> and <script setup> co-usage > spaces in ExportDefaultDeclaration node > with minimal spaces 1`] = `
"import { x } from './x'
        
        export const n = 1
        export default{
          some:'option'
        }
        
        x()"
`;

exports[`SFC compile <script setup> > async/await detection > expression statement 1`] = `"await foo"`;

exports[`SFC compile <script setup> > async/await detection > multiple \`if for\` nested statements 1`] = `
"if (ok) {
        for (let a of [1,2,3]) {
          await a
        }
        for (let a of [1,2,3]) {
          await a
          await a
        }
      }"
`;

exports[`SFC compile <script setup> > async/await detection > multiple \`if while\` nested statements 1`] = `
"if (ok) {
        while (d) {
          await 5
        }
        while (d) {
          await 5
          await 6
          if (c) {
            let f = 10
            10 + await 7
          } else {
            await 8
            await 9
          }
        }
      }"
`;

exports[`SFC compile <script setup> > async/await detection > multiple \`if\` nested statements 1`] = `
"if (ok) {
        let a = 'foo'
        await 0 + await 1
        await 2
      } else if (a) {
        await 10
        if (b) {
          await 0 + await 1
        } else {
          let a = 'foo'
          await 2
        }
        if (b) {
          await 3
          await 4
        }
      } else {
        await 5
      }"
`;

exports[`SFC compile <script setup> > async/await detection > nested await 1`] = `"await (await foo)"`;

exports[`SFC compile <script setup> > async/await detection > nested await 2`] = `"await ((await foo))"`;

exports[`SFC compile <script setup> > async/await detection > nested await 3`] = `"await (await (await foo))"`;

exports[`SFC compile <script setup> > async/await detection > nested leading await in expression statement 1`] = `
"foo()
await 1 + await 2"
`;

exports[`SFC compile <script setup> > async/await detection > nested statements 1`] = `"if (ok) { await foo } else { await bar }"`;

exports[`SFC compile <script setup> > async/await detection > ref 1`] = `"let a = ref(1 + (await foo))"`;

exports[`SFC compile <script setup> > async/await detection > should ignore await inside functions 1`] = `"async function foo() { await bar }"`;

exports[`SFC compile <script setup> > async/await detection > should ignore await inside functions 2`] = `"const foo = async () => { await bar }"`;

exports[`SFC compile <script setup> > async/await detection > should ignore await inside functions 3`] = `"const obj = { async method() { await bar }}"`;

exports[`SFC compile <script setup> > async/await detection > should ignore await inside functions 4`] = `"const cls = class Foo { async method() { await bar }}"`;

exports[`SFC compile <script setup> > async/await detection > single line conditions 1`] = `"if (false) await foo()"`;

exports[`SFC compile <script setup> > async/await detection > variable 1`] = `"const a = 1 + (await foo)"`;

exports[`SFC compile <script setup> > binding analysis for destructure 1`] = `"const { foo, b: bar, ['x' + 'y']: baz, x: { y, zz: { z }}} = {}"`;

exports[`SFC compile <script setup> > defineEmits() 1`] = `"const myEmit = defineEmits(['foo', 'bar'])"`;

exports[`SFC compile <script setup> > defineExpose() 1`] = `"defineExpose({ foo: 123 })"`;

exports[`SFC compile <script setup> > defineProps w/ external definition 1`] = `
"import { propsModel } from './props'
    
    const props = defineProps(propsModel)"
`;

exports[`SFC compile <script setup> > defineProps w/ leading code 1`] = `
"import { x } from './x'
    const props = defineProps({})"
`;

exports[`SFC compile <script setup> > defineProps() 1`] = `
"const props = defineProps({
  foo: String
})
const bar = 1"
`;

exports[`SFC compile <script setup> > defineProps/defineEmits in multi-variable declaration (full removal) 1`] = `
"const props = defineProps(['item']),
          emit = defineEmits(['a']);"
`;

exports[`SFC compile <script setup> > defineProps/defineEmits in multi-variable declaration 1`] = `
"const props = defineProps(['item']),
      a = 1,
      emit = defineEmits(['a']);"
`;

exports[`SFC compile <script setup> > defineProps/defineEmits in multi-variable declaration fix #6757  1`] = `
"const a = 1,
          props = defineProps(['item']),
          emit = defineEmits(['a']);"
`;

exports[`SFC compile <script setup> > dev mode import usage check > TS annotations 1`] = `
"import { Foo, Bar, Baz, Qux, Fred } from './x'
        
        const a = 1
        function b() {}"
`;

exports[`SFC compile <script setup> > dev mode import usage check > attribute expressions 1`] = `
"import { bar, baz } from './x'
        
        const cond = true"
`;

exports[`SFC compile <script setup> > dev mode import usage check > components 1`] = `
"import { FooBar, FooBaz, FooQux, foo } from './x'
        
        const fooBar: FooBar = 1"
`;

exports[`SFC compile <script setup> > dev mode import usage check > directive 1`] = `"import { vMyDir } from './x'"`;

exports[`SFC compile <script setup> > dev mode import usage check > js template string interpolations 1`] = `"import { VAR, VAR2, VAR3 } from './x'"`;

exports[`SFC compile <script setup> > dev mode import usage check > last tag 1`] = `"import { FooBaz, Last } from './x'"`;

exports[`SFC compile <script setup> > dev mode import usage check > vue interpolations 1`] = `"import { x, y, z, x$y } from './x'"`;

exports[`SFC compile <script setup> > errors > should allow defineProps/Emit() referencing imported binding 1`] = `
"import { bar } from './bar'
        
        defineProps({
          foo: {
            default: () => bar
          }
        })
        defineEmits({
          foo: () => bar > 1
        })"
`;

exports[`SFC compile <script setup> > errors > should allow defineProps/Emit() referencing scope var 1`] = `
"const bar = 1
          defineProps({
            foo: {
              default: bar => bar + 1
            }
          })
          defineEmits({
            foo: bar => bar > 1
          })"
`;

exports[`SFC compile <script setup> > imports > dedupe between user & helper 1`] = `
"import { ref } from 'vue'
      
      let foo = ref(1)"
`;

exports[`SFC compile <script setup> > imports > import dedupe between <script> and <script setup> 1`] = `
"import { x } from './x'
        
        x()"
`;

exports[`SFC compile <script setup> > imports > should allow defineProps/Emit at the start of imports 1`] = `
"import { ref } from 'vue'
      
      defineProps(['foo'])
      defineEmits(['bar'])
      const r = ref(0)"
`;

exports[`SFC compile <script setup> > imports > should extract comment for import or type declarations 1`] = `
"import a from 'a' // comment
        import b from 'b'"
`;

exports[`SFC compile <script setup> > imports > should hoist and expose imports 1`] = `
"import { ref } from 'vue'
          import 'foo/css'"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > avoid unref() when necessary 1`] = `
"import { ref } from 'vue'
        import Foo, { bar } from './Foo.vue'
        import other from './util'
        import * as tree from './tree'
        
        const count = ref(0)
        const constant = {}
        const maybe = foo()
        let lett = 1
        function fn() {}"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > referencing scope components and directives 1`] = `
"import ChildComp from './Child.vue'
        import SomeOtherComp from './Other.vue'
        import vMyDir from './my-dir'"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > should work 1`] = `
"import { ref } from 'vue'
        
        const count = ref(0)"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > template assignment expression codegen 1`] = `
"import { ref } from 'vue'
        
        const count = ref(0)
        const maybe = foo()
        let lett = 1
        let v = ref(1)"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > template destructure assignment codegen 1`] = `
"import { ref } from 'vue'
        
        const val = {}
        const count = ref(0)
        const maybe = foo()
        let lett = 1"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > template update expression codegen 1`] = `
"import { ref } from 'vue'
        
        const count = ref(0)
        const maybe = foo()
        let lett = 1"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > v-model codegen 1`] = `
"import { ref } from 'vue'
        
        const count = ref(0)
        const maybe = foo()
        let lett = 1"
`;

exports[`SFC compile <script setup> > inlineTemplate mode > with defineExpose() 1`] = `
"const count = ref(0)
        defineExpose({ count })"
`;

exports[`SFC compile <script setup> > should expose top level declarations 1`] = `
"import { x } from './x'
      
      let a = 1
      const b = 2
      function c() {}
      class d {}
      
      import { xx } from './x'
      let aa = 1
      const bb = 2
      function cc() {}
      class dd {}"
`;

exports[`SFC compile <script setup> > with TypeScript > const Enum 1`] = `"const enum Foo { A = 123 }"`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (exported interface) 1`] = `
"export interface Emits { (e: 'foo' | 'bar'): void }
      
      const emit = defineEmits<Emits>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (exported type alias) 1`] = `
"export type Emits = { (e: 'foo' | 'bar'): void }
      
      const emit = defineEmits<Emits>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (interface ts type) 1`] = `
"interface Emits { (e: 'foo'): void }
      
      const emit: Emits = defineEmits(['foo'])"
`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (interface) 1`] = `
"interface Emits { (e: 'foo' | 'bar'): void }
      
      const emit = defineEmits<Emits>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (referenced exported function type) 1`] = `
"export type Emits = (e: 'foo' | 'bar') => void
      
      const emit = defineEmits<Emits>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (referenced function type) 1`] = `
"type Emits = (e: 'foo' | 'bar') => void
      
      const emit = defineEmits<Emits>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (type alias) 1`] = `
"type Emits = { (e: 'foo' | 'bar'): void }
      
      const emit = defineEmits<Emits>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type (type literal w/ call signatures) 1`] = `"const emit = defineEmits<{(e: 'foo' | 'bar'): void; (e: 'baz', id: number): void;}>()"`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type 1`] = `"const emit = defineEmits<(e: 'foo' | 'bar') => void>()"`;

exports[`SFC compile <script setup> > with TypeScript > defineEmits w/ type from normal script 1`] = `
"export interface Emits { (e: 'foo' | 'bar'): void }
      
      const emit = defineEmits<Emits>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps w/ exported interface 1`] = `
"export interface Props { x?: number }
      
      defineProps<Props>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps w/ exported interface in normal script 1`] = `
"export interface Props { x?: number }
      
        defineProps<Props>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps w/ exported type alias 1`] = `
"export type Props = { x?: number }
      
      defineProps<Props>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps w/ extends interface 1`] = `
"interface Bar extends Foo { y?: number }
        interface Props extends Bar {
          z: number
          y: string
        }
        
        interface Foo { x?: number }
      
        defineProps<Props>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps w/ interface 1`] = `
"interface Props { x?: number }
      
      defineProps<Props>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps w/ type 1`] = `
"interface Test {}

      type Alias = number[]

      
      defineProps<{
        string: string
        number: number
        boolean: boolean
        object: object
        objectLiteral: { a: number }
        fn: (n: number) => void
        functionRef: Function
        objectRef: Object
        dateTime: Date
        array: string[]
        arrayRef: Array<any>
        tuple: [number, number]
        set: Set<string>
        literal: 'foo'
        optional?: any
        recordRef: Record<string, null>
        interface: Test
        alias: Alias
        method(): void
        symbol: symbol

        union: string | number
        literalUnion: 'foo' | 'bar'
        literalUnionNumber: 1 | 2 | 3 | 4 | 5
        literalUnionMixed: 'foo' | 1 | boolean
        intersection: Test & {}
        foo: ((item: any) => boolean) | null
      }>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps w/ type alias 1`] = `
"type Props = { x?: number }
      
      defineProps<Props>()"
`;

exports[`SFC compile <script setup> > with TypeScript > defineProps/Emit w/ runtime options 1`] = `
"const props = defineProps({ foo: String })
const emit = defineEmits(['a', 'b'])"
`;

exports[`SFC compile <script setup> > with TypeScript > hoist type declarations 1`] = `
"export interface Foo {}
        type Bar = {}"
`;

exports[`SFC compile <script setup> > with TypeScript > import type 1`] = `
"import type { Foo } from './main.ts'
        import { type Bar, Baz } from './main.ts'"
`;

exports[`SFC compile <script setup> > with TypeScript > runtime Enum 1`] = `"enum Foo { A = 123 }"`;

exports[`SFC compile <script setup> > with TypeScript > runtime Enum in normal script 1`] = `
"enum Foo { A = 123 }
        
          export enum D { D = \\"D\\" }
          const enum C { C = \\"C\\" }
          enum B { B = \\"B\\" }"
`;

exports[`SFC compile <script setup> > with TypeScript > withDefaults (dynamic) 1`] = `
"import { defaults } from './foo'
      
      const props = withDefaults(defineProps<{
        foo?: string
        bar?: number
        baz: boolean
      }>(), { ...defaults })"
`;

exports[`SFC compile <script setup> > with TypeScript > withDefaults (dynamic) w/ production mode 1`] = `
"import { defaults } from './foo'
      
      const props = withDefaults(defineProps<{
        foo: () => void
        bar: boolean
        baz: boolean | (() => void)
        qux: string | number
      }>(), { ...defaults })"
`;

exports[`SFC compile <script setup> > with TypeScript > withDefaults (static) + normal script 1`] = `
"interface Props {
          a?: string;
        }
      
        const props = withDefaults(defineProps<Props>(), {
          a: \\"a\\",
        });"
`;

exports[`SFC compile <script setup> > with TypeScript > withDefaults (static) 1`] = `
"const props = withDefaults(defineProps<{
        foo?: string
        bar?: number;
        baz: boolean;
        qux?(): number;
        quux?(): void
        quuxx?: Promise<string>;
        fred?: string
      }>(), {
        foo: 'hi',
        qux() { return 1 },
        ['quux']() { },
        async quuxx() { return await Promise.resolve('hi') },
        get fred() { return 'fred' }
      })"
`;

exports[`SFC compile <script setup> > with TypeScript > withDefaults (static) w/ production mode 1`] = `
"const props = withDefaults(defineProps<{
        foo: () => void
        bar: boolean
        baz: boolean | (() => void)
        qux: string | number
      }>(), {
        baz: true,
        qux: 'hi'
      })"
`;
