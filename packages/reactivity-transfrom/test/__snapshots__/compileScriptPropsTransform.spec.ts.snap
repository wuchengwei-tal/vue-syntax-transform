// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`sfc props transform > $$() escape 1`] = `
"const { foo, bar: baz } = defineProps(['foo'])
      console.log((foo))
      console.log((baz))
      ;({ foo, baz })"
`;

exports[`sfc props transform > aliasing 1`] = `
"const { foo: bar } = defineProps(['foo'])
      let x = foo
      let y = bar"
`;

exports[`sfc props transform > basic usage 1`] = `
"const { foo } = defineProps(['foo'])
      console.log(foo)"
`;

exports[`sfc props transform > computed static key 1`] = `
"const { ['foo']: foo } = defineProps(['foo'])
    console.log(foo)"
`;

exports[`sfc props transform > default values w/ runtime declaration 1`] = `"const { foo = 1, bar = {} } = defineProps(['foo', 'bar'])"`;

exports[`sfc props transform > default values w/ type declaration 1`] = `"const { foo = 1, bar = {} } = defineProps<{ foo?: number, bar?: object }>()"`;

exports[`sfc props transform > default values w/ type declaration, prod mode 1`] = `"const { foo = 1, bar = {}, func = () => {} } = defineProps<{ foo?: number, bar?: object, baz?: any, boola?: boolean, boolb?: boolean | number, func?: Function }>()"`;

exports[`sfc props transform > multiple variable declarations 1`] = `"const bar = 'fish', { foo } = defineProps(['foo']), hello = 'world'"`;

exports[`sfc props transform > nested scope 1`] = `
"const { foo, bar } = defineProps(['foo', 'bar'])
      function test(foo) {
        console.log(foo)
        console.log(bar)
      }"
`;

exports[`sfc props transform > non-identifier prop names 1`] = `
"const { 'foo.bar': fooBar } = defineProps({ 'foo.bar': Function })
      let x = fooBar"
`;

exports[`sfc props transform > rest spread 1`] = `"const { foo, bar, ...rest } = defineProps(['foo', 'bar', 'baz'])"`;
